package web3j;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class SupplyChain extends Contract {
    public static String BINARY = "";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"type_t\",\"type\":\"string\"}],\"name\":\"registerCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"r_idx\",\"type\":\"uint256\"}],\"name\":\"showReceipt\",\"outputs\":[{\"name\":\"out_idx\",\"type\":\"uint256\"},{\"name\":\"out_from\",\"type\":\"string\"},{\"name\":\"out_to\",\"type\":\"string\"},{\"name\":\"out_value\",\"type\":\"int256\"},{\"name\":\"out_return_time\",\"type\":\"uint256\"},{\"name\":\"out_status\",\"type\":\"int256\"},{\"name\":\"out_used\",\"type\":\"bool\"},{\"name\":\"out_signer\",\"type\":\"address[2]\"},{\"name\":\"out_sign\",\"type\":\"bool[2]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"}],\"name\":\"returnDebtCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"transferReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"r_idx\",\"type\":\"uint256\"}],\"name\":\"signReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"transferBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyInfo\",\"outputs\":[{\"name\":\"out_name\",\"type\":\"string\"},{\"name\":\"out_addr\",\"type\":\"address\"},{\"name\":\"out_balance\",\"type\":\"int256\"},{\"name\":\"out_type\",\"type\":\"string\"},{\"name\":\"out_r_num\",\"type\":\"uint256\"},{\"name\":\"out_r\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"r_idx\",\"type\":\"uint256\"}],\"name\":\"checkReceiptSign\",\"outputs\":[{\"name\":\"out_signer\",\"type\":\"address[2]\"},{\"name\":\"out_sign\",\"type\":\"bool[2]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"}],\"name\":\"getReceiptIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"c_name\",\"type\":\"string\"}],\"name\":\"getCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cur_time\",\"type\":\"uint256\"}],\"name\":\"returnDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"int256\"},{\"name\":\"return_time\",\"type\":\"uint256\"}],\"name\":\"registerReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"to\",\"type\":\"string\"}],\"name\":\"applyFinancing\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"addBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"err_code\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"return_time\",\"type\":\"uint256\"}],\"name\":\"returnDebtEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"type_t\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"receipts_num\",\"type\":\"uint256\"}],\"name\":\"showCompanyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"r_idx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"return_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"used\",\"type\":\"bool\"}],\"name\":\"showReceiptEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"err_info\",\"type\":\"string\"}],\"name\":\"errorEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"signer\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"sign\",\"type\":\"bool[]\"}],\"name\":\"showSignEvent\",\"type\":\"event\"}]";

    public static final String FUNC_REGISTERCOMPANY = "registerCompany";

    public static final String FUNC_SHOWRECEIPT = "showReceipt";

    public static final String FUNC_RETURNDEBTCOMPANY = "returnDebtCompany";

    public static final String FUNC_TRANSFERRECEIPT = "transferReceipt";

    public static final String FUNC_SIGNRECEIPT = "signReceipt";

    public static final String FUNC_TRANSFERBALANCE = "transferBalance";

    public static final String FUNC_GETMYINFO = "getMyInfo";

    public static final String FUNC_CHECKRECEIPTSIGN = "checkReceiptSign";

    public static final String FUNC_GETRECEIPTIDX = "getReceiptIdx";

    public static final String FUNC_GETCOMPANY = "getCompany";

    public static final String FUNC_RETURNDEBT = "returnDebt";

    public static final String FUNC_REGISTERRECEIPT = "registerReceipt";

    public static final String FUNC_APPLYFINANCING = "applyFinancing";

    public static final String FUNC_ADDBALANCE = "addBalance";

    public static final Event RETURNDEBTEVENT_EVENT = new Event("returnDebtEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SHOWCOMPANYEVENT_EVENT = new Event("showCompanyEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SHOWRECEIPTEVENT_EVENT = new Event("showReceiptEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Int256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ERROREVENT_EVENT = new Event("errorEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event SHOWSIGNEVENT_EVENT = new Event("showSignEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Bool>>() {}));
    ;

    @Deprecated
    protected SupplyChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SupplyChain(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SupplyChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SupplyChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> registerCompany(String name, String addr, String type_t) {
        final Function function = new Function(
                FUNC_REGISTERCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(type_t)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerCompany(String name, String addr, String type_t, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(type_t)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerCompanySeq(String name, String addr, String type_t) {
        final Function function = new Function(
                FUNC_REGISTERCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(addr), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(type_t)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> showReceipt(BigInteger r_idx) {
        final Function function = new Function(
                FUNC_SHOWRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(r_idx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void showReceipt(BigInteger r_idx, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SHOWRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(r_idx)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String showReceiptSeq(BigInteger r_idx) {
        final Function function = new Function(
                FUNC_SHOWRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(r_idx)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> returnDebtCompany(String from, String to) {
        final Function function = new Function(
                FUNC_RETURNDEBTCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void returnDebtCompany(String from, String to, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_RETURNDEBTCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String returnDebtCompanySeq(String from, String to) {
        final Function function = new Function(
                FUNC_RETURNDEBTCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> transferReceipt(String from, String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFERRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferReceipt(String from, String to, BigInteger value, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transferReceiptSeq(String from, String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFERRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> signReceipt(BigInteger r_idx) {
        final Function function = new Function(
                FUNC_SIGNRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(r_idx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void signReceipt(BigInteger r_idx, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SIGNRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(r_idx)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String signReceiptSeq(BigInteger r_idx) {
        final Function function = new Function(
                FUNC_SIGNRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(r_idx)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> transferBalance(String from, String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFERBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferBalance(String from, String to, BigInteger value, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transferBalanceSeq(String from, String to, BigInteger value) {
        final Function function = new Function(
                FUNC_TRANSFERBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> getMyInfo() {
        final Function function = new Function(
                FUNC_GETMYINFO, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getMyInfo(TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETMYINFO, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getMyInfoSeq() {
        final Function function = new Function(
                FUNC_GETMYINFO, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> checkReceiptSign(BigInteger r_idx) {
        final Function function = new Function(
                FUNC_CHECKRECEIPTSIGN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(r_idx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void checkReceiptSign(BigInteger r_idx, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CHECKRECEIPTSIGN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(r_idx)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String checkReceiptSignSeq(BigInteger r_idx) {
        final Function function = new Function(
                FUNC_CHECKRECEIPTSIGN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(r_idx)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> getReceiptIdx(String from, String to) {
        final Function function = new Function(
                FUNC_GETRECEIPTIDX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getReceiptIdx(String from, String to, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETRECEIPTIDX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getReceiptIdxSeq(String from, String to) {
        final Function function = new Function(
                FUNC_GETRECEIPTIDX, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> getCompany(String c_name) {
        final Function function = new Function(
                FUNC_GETCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(c_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getCompany(String c_name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(c_name)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getCompanySeq(String c_name) {
        final Function function = new Function(
                FUNC_GETCOMPANY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(c_name)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> returnDebt(BigInteger cur_time) {
        final Function function = new Function(
                FUNC_RETURNDEBT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(cur_time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void returnDebt(BigInteger cur_time, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_RETURNDEBT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(cur_time)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String returnDebtSeq(BigInteger cur_time) {
        final Function function = new Function(
                FUNC_RETURNDEBT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(cur_time)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> registerReceipt(String from, String to, BigInteger value, BigInteger return_time) {
        final Function function = new Function(
                FUNC_REGISTERRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(value), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(return_time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerReceipt(String from, String to, BigInteger value, BigInteger return_time, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(value), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(return_time)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerReceiptSeq(String from, String to, BigInteger value, BigInteger return_time) {
        final Function function = new Function(
                FUNC_REGISTERRECEIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(value), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(return_time)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> applyFinancing(String from, String to) {
        final Function function = new Function(
                FUNC_APPLYFINANCING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void applyFinancing(String from, String to, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_APPLYFINANCING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String applyFinancingSeq(String from, String to) {
        final Function function = new Function(
                FUNC_APPLYFINANCING, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(from), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> addBalance(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_ADDBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addBalance(String to, BigInteger value, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String addBalanceSeq(String to, BigInteger value) {
        final Function function = new Function(
                FUNC_ADDBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(to), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public List<ReturnDebtEventEventResponse> getReturnDebtEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETURNDEBTEVENT_EVENT, transactionReceipt);
        ArrayList<ReturnDebtEventEventResponse> responses = new ArrayList<ReturnDebtEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReturnDebtEventEventResponse typedResponse = new ReturnDebtEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.err_code = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.return_time = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerreturnDebtEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(RETURNDEBTEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerreturnDebtEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(RETURNDEBTEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<ShowCompanyEventEventResponse> getShowCompanyEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SHOWCOMPANYEVENT_EVENT, transactionReceipt);
        ArrayList<ShowCompanyEventEventResponse> responses = new ArrayList<ShowCompanyEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ShowCompanyEventEventResponse typedResponse = new ShowCompanyEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.type_t = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.receipts_num = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registershowCompanyEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SHOWCOMPANYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registershowCompanyEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SHOWCOMPANYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<ShowReceiptEventEventResponse> getShowReceiptEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SHOWRECEIPTEVENT_EVENT, transactionReceipt);
        ArrayList<ShowReceiptEventEventResponse> responses = new ArrayList<ShowReceiptEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ShowReceiptEventEventResponse typedResponse = new ShowReceiptEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.r_idx = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.return_time = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.used = (Boolean) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registershowReceiptEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SHOWRECEIPTEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registershowReceiptEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SHOWRECEIPTEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<ErrorEventEventResponse> getErrorEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERROREVENT_EVENT, transactionReceipt);
        ArrayList<ErrorEventEventResponse> responses = new ArrayList<ErrorEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorEventEventResponse typedResponse = new ErrorEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.err_info = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registererrorEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ERROREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registererrorEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ERROREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<ShowSignEventEventResponse> getShowSignEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SHOWSIGNEVENT_EVENT, transactionReceipt);
        ArrayList<ShowSignEventEventResponse> responses = new ArrayList<ShowSignEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ShowSignEventEventResponse typedResponse = new ShowSignEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.signer = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sign = (List<Boolean>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registershowSignEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SHOWSIGNEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registershowSignEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SHOWSIGNEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static SupplyChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SupplyChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SupplyChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SupplyChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SupplyChain load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SupplyChain(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SupplyChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SupplyChain(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SupplyChain> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SupplyChain.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<SupplyChain> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SupplyChain.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SupplyChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SupplyChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SupplyChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SupplyChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ReturnDebtEventEventResponse {
        public Log log;

        public String err_code;

        public String from;

        public String to;

        public BigInteger value;

        public BigInteger return_time;
    }

    public static class ShowCompanyEventEventResponse {
        public Log log;

        public String name;

        public String addr;

        public BigInteger balance;

        public String type_t;

        public BigInteger receipts_num;
    }

    public static class ShowReceiptEventEventResponse {
        public Log log;

        public BigInteger r_idx;

        public String from;

        public String to;

        public BigInteger value;

        public BigInteger return_time;

        public BigInteger status;

        public Boolean used;
    }

    public static class ErrorEventEventResponse {
        public Log log;

        public String err_info;
    }

    public static class ShowSignEventEventResponse {
        public Log log;

        public List<String> signer;

        public List<Boolean> sign;
    }
}